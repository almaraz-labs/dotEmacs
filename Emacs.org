#+TITLE: Literal dotEmacs Framework II (def)
#+AUTHOR: Erik Almaraz (skribest)
#+PROPERTY: header-args:emacs-lisp :tangle no :mkdirp yes
#+STARTUP: show2levels

* Preface

** Header

#+begin_src emacs-lisp :tangle ./init.el
  ;;; init.el --- Emacs Initialization File  -*- lexical-binding: t; -*-
  ;; This file is auto generated by Emacs.org

  ;; Author: Erik Almaraz <erik@almarazlabs.com>
  ;; Maintainer: Erik Almaraz <erik@almarazlabs.com>
  ;; Created 2021-12-05 Sun
  ;; Version: 0.1
  ;; Keywords: Emacs, .emacs, init, Emacs Lisp
  ;; URL: https;//github.com/skribest/dotEmacs

  ;;; Commentary

  ;;; Introduction
  ;; The Next Generation Emacs Configuration - dotEmacs Framework (DEF)

  ;; This is brand-spankin-new configuration that I compiled this weekend. I originally setup my
  ;; Emacs configuration in this manner, the style which was inspired by Steve Yegge [1].
  ;; My Emacs passion was reignited by David Wilsons System Crafters YouTube channel, where
  ;; he presented his emacs-from-scratch series [2]. I then went through the exercise of setting
  ;; up a literal configuration based on Org Babel [3]. I tried this style for a month, however,
  ;; I found it was quite cumbersome when needing to revert... My Current approach of keeping config
  ;; files disparate, and letting init load in the needed files.

  ;; After switching back to my old environment, I realized the power of Org & Babel and how it allows
  ;; one to organize their code. I am going to revise my previous once again use org bable, but keep my
  ;; same style, i.e. Org Babel will write different "conf" files for different sections.

  ;;; References:

  ;;   [1] https://sites.google.com/site/steveyegge2/my-dot-emacs-file
  ;;   [2] https://github.com/daviwil/emacs-from-scratch
  ;;   [3] https://orgmode.org/worg/org-contrib/babel/intro.html

  ;;<=================================================================================================>


  ;; Code:


#+end_src

** Customizable (Global) Variables

#+begin_src emacs-lisp :tangle ./init.el

  ;;; Define Global variables
  (defgroup dotEmacs nil
    "The Next Generation Emacs Configuration."
    :group 'applications
    :version "0.1")

  (defcustom def/default-font-size 110
    "Global variable for font size."
    :type 'integer
    :group 'dotEmacs
    :version "0.1")

  (defcustom def/default-variable-font-size 110
    "Global variable for variable font size."
    :type 'integer
    :group 'dotEmacs
    :version "0.1")

  (defcustom def/default-font-family "Fira Code Retina"
    "Global variable for font family."
    :type 'string
    :group 'dotEmacs
    :version "0.1")  

  (defcustom def/default-variable-font-family "Iosevka Aile"
    "Global variable for variable font family."
    :type 'string
    :group 'dotEmacs
    :version "0.1")

  (defcustom def/work t
    "Global boolean variable for Windows work machine."
    :type 'boolean
    :group 'dotEmacs
    :version "0.1")

  (defcustom def/column-margin 101
    "Global customizable variable for fill column indicator."
    :type 'integer
    :group 'dotEmacs
    :version "0.1")

  (defcustom def/home-win-path "C:/Users/erik/AppData/Roaming/"
    "Global variable for Emacs HOME PATH for windows work machine."
    :type 'string
    :group 'dotEmacs
    :version "0.1")

  (defcustom def/win-app-path (concat def/home-win-path ".apps/")
    "Global variable for Emacs HOME PATH for windows work machine."
    :type 'string
    :group 'dotEmacs
    :version "0.1")  

  (defcustom def/lp-dir "~/.emacs.d/OrgFiles/Babel/"
    "Global variable for Org Bable Literate Programing files directory."
    :type 'string
    :group 'dotEmacs
    :version "0.1")

  (defcustom def/user-emacs-directory "~/.emacs.d/"
    "Global variable for Emacs Literal Configuration."
    :type 'string
    :group 'dotEmacs
    :version "0.1")

  (defcustom def/user-emacs-cache-directory "~/.cache/emacs/"
    "Global variable for Emacs user cache. Set when used in 
  conjunction with `no-littering'."
    :type 'string
    :group 'dotEmacs
    :version "0.1")

  (defcustom def/org-agenda-dir "~/.emacs.d/OrgFiles/Notes/"
    "Global variable for Org Agenda files directory."
    :type 'string
    :group 'dotEmacs
    :version "0.1")

  (defcustom def/org-roam-dir "~/.emacs.d/OrgFiles/Roam/"
    "Global variable for Org Roam files/database directory."
    :type 'string
    :group 'dotEmacs
    :version "0.1")

#+end_src

** Generate init.el

#+begin_src emacs-lisp :tangle ./init.el

  ;;; Emacs Configuration

  ;; Set directories that contain Emacs configuration files and load..
  (let (
        ;; Define variables here
        (confs "~/.emacs.d/conf/")
        (elisp "~/.emacs.d/elisp/")

        )
    ;; let body...

    ;; Add paths to `load-path'
    (add-to-list 'load-path confs)
    (add-to-list 'load-path elisp)

    ;; Load config files here...
    ;; Order matters!
    (load "system-settings-conf"      'noerror 'nomessage)
    (load "basic-ui-conf"             'noerror 'nomessage)
    (load "package-management-conf"   'noerror 'nomessage)
    (load "ui-conf"                   'noerror 'nomessage)
    (load "completion-framework-conf" 'noerror 'nomessage)
    (load "file-system-conf"          'noerror 'nomessage)
    (load "org-conf"                  'noerror 'nomessage)
    (load "babel-conf"                'noerror 'nomessage)
    (load "roam-conf"                 'noerror 'nomessage)
    (load "ide-conf"                  'noerror 'nomessage)
    (load "exploratory-packages-conf" 'noerror 'nomessage)

    ;; Load personal elisp utils/libraries here...
    ;; 
    (load "utils"   'noerror 'nomessage)
    ;;(load "sandbox" 'noerror 'nomessage)

    );; End of let


  ;;; Notes:
  ;; To add helper functions in Emacs setup
  ;; (add-hook 'after-init-hook #'qr/my-function)

#+end_src

* UI Configuration

** Generate early-init.el

Header

#+begin_src emacs-lisp :tangle ./early-init.el
  ;;; early-init.el --- Emacs Early Initilization File
  ;; This file is auto generated by Emacs.org

  ;; Author: Erik Almaraz <erik@almarazlabs.com>
  ;; Maintainer: Erik Almaraz <erik@almarazlabs.com>
  ;; Created 2021-12-05 Sun
  ;; Version: 0.1
  ;; Keywords: Emacs, .emacs, init, Emacs Lisp
  ;; URL: https;//github.com/skribest/emacs-config

  ;;; Commentary
  
  ;; Initialization sets up more "cleanly" when we set these fundamental UI
  ;; elements here in the early-init file [1]. In order to optimize initilization, we dial down
  ;; Emacs garbage collection [2], thereby directing resources to loading and initializing libraries,
  ;; this was inspired by David Wilson's Emacs configuration [3]

  ;;; References:

  ;;   [1] https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html
  ;;   [2] https://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html
  ;;   [3] https://config.daviwil.com/emacs

  ;;<=================================================================================================>


  ;;; Code:


#+end_src


Basic UI Settings - performance is best when they are set in the early-init.el

#+begin_src emacs-lisp :tangle ./early-init.el
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)     ; Disable visible scrollbar
  (tool-bar-mode -1)       ; Disable the toolbar
  (tooltip-mode -1)        ; Disable tooltips
  (menu-bar-mode -1)       ; Disable the menu bar
  (set-fringe-mode 10)     ; Give some breathing room


  ;; Set up the visible bell
  (setq visible-bell nil
        ring-bell-function (lambda ()
                             (invert-face 'mode-line)
                             (run-with-timer 0.1 nil 'invert-face 'mode-line)))

  ;; Show column number in modeline and line numbers in buffers
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Set frame to fullscreen
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Set frame transparency (only accepts integer values)
  (set-frame-parameter (selected-frame) 'alpha '(88 . 88))
  (add-to-list 'default-frame-alist `(alpha . ,'(88 . 88)))

#+end_src

** System Settings

File header and commentary..

#+begin_src emacs-lisp :tangle ./conf/system-settings-conf.el :mkdirp yes
  ;;; system-settings-conf.el --- Emacs System Specific Settings  -*- lexical-binding: t; -*-
  ;; This file is auto generated by Emacs.org

  ;; Author: Erik Almaraz <erik@almarazlabs.com>
  ;; Maintainer: Erik Almaraz <erik@almarazlabs.com>
  ;; Created 2021-12-05 Sun
  ;; Version: 0.1
  ;; Keywords: Emacs, .emacs, init, Emacs Lisp
  ;; URL: https;//github.com/skribest/emacs-config

  ;;; Commentary

  ;;; References:

  ;;   [1] 
  ;;   [2] 
  ;;   [3] 

  ;;<=================================================================================================>


  ;;; Code:


#+end_src

Operating system specific settings, basic setup for my Windows machine, setting up path to portable apps needed by Emacs.

#+begin_src emacs-lisp :tangle ./conf/system-settings-conf.el
;;; System Settings

;; Configure system specific PATHS.
(if (and (string-equal system-type "windows-nt") def/work)
    (let ((mypaths
           `(
             ,(concat def/win-app-path "Emacs/emacs-27.2-x86_64/bin")
             ,(concat def/win-app-path "MinGW/bin")
             ,(concat def/win-app-path "PortableGit/cmd")
             ,(concat def/win-app-path "Perl/perl/bin")
             ,(concat def/win-app-path "Python/python3.9.9")
             ,(concat def/win-app-path "MikTex/texmfs/install/miktex/bin/x64")
             ,(concat def/win-app-path "ImageMagick")
             ,(concat def/win-app-path "GnuPG/bin")
             ,(concat def/win-app-path "Hunspell/bin")
             )))
      (setenv "PATH" (mapconcat 'identity mypaths ";"))
      (setq exec-path (append mypaths (list "." exec-directory))
            def/default-font-size 90
            def/default-variable-font-size 90)))


;; Notes:
;; To add helper functions in Emacs setup
;; (add-hook 'after-init-hook #'ea/my-function)





#+end_src

Footer

#+begin_src emacs-lisp :tangle ./conf/system-settings-conf.el


  ;;; Footer


  ;;; system-settings-conf.el ends here
#+end_src

** Basic UI Configuration

Header & commentary

#+begin_src emacs-lisp :tangle ./conf/basic-ui-conf.el :mkdirp yes
  ;;; basic-ui-conf.el --- Emacs Basic UI Configuration  -*- lexical-binding: t; -*-
  ;; This file is auto generated by Emacs.org

  ;; Author: Erik Almaraz <erik@almarazlabs.com>
  ;; Maintainer: Erik Almaraz <erik@almarazlabs.com>
  ;; Created 2021-12-05 Sun
  ;; Version: 0.1
  ;; Keywords: Emacs, .emacs, init, Emacs Lisp
  ;; URL: https;//github.com/skribest/dotEmacs

  ;;; Commentary

  ;;; References:

  ;;   [1] 
  ;;   [2] 
  ;;   [3] 

  ;;<=================================================================================================>


  ;;; Code:


#+end_src

Configuration

#+begin_src emacs-lisp :tangle ./conf/basic-ui-conf.el

  ;;; Set column numbers only for certain modes 
  ;; See `early-init.el' for other basic ui configuration
  ;; Disable Line Numbers (per mode)
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))


  ;;; Font Configuration

  ;; Set the default face
  (set-face-attribute 'default nil
                      :font def/default-font-family ;;Fira Code Retina
                      :height def/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil
                      :font def/default-font-family ;;Fira Code Retina
                      :height def/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil
                      :font def/default-variable-font-family ;;Iosevka Aile (prev "Canterell")
                      :height def/default-variable-font-size
                      :weight 'regular)

#+end_src

Footer

#+begin_src emacs-lisp


;;; Footer


;;; basic-ui-conf.el ends here
#+end_src

** Package Management System

Code required in =early-init.el= to disable =package.el= from interfering with =straight=

#+begin_src emacs-lisp :tangle ./early-init.el

  ;; disable package.el -> use instead straight.el (better package management system)
  (setq package-enable-at-startup nil)

#+end_src

Header & Commentary

#+begin_src emacs-lisp :tangle ./conf/package-management-conf.el :mkdirp yes
  ;;; package-management-conf.el --- Package Management Configuration  -*- lexical-binding: t; -*-
  ;; This file is auto generated by Emacs.org

  ;; Author: Erik Almaraz <erik@almarazlabs.com>
  ;; Created 2021-12-05 Sun
  ;; Version: 0.1
  ;; Keywords: Emacs, .emacs, init, Emacs Lisp
  ;; URL: https;//github.com/skribest/dotEmacs

  ;;; Commentary

  ;;; References:

  ;;   [1] 
  ;;   [2] 
  ;;   [3] 

  ;;<=================================================================================================>


  ;;; Code:


#+end_src

Package Management with =straight=

#+begin_src emacs-lisp :tangle ./conf/package-management-conf.el

  ;;; Package Management with "straight.el"

  ;; Initialize `straight' (instead of `package')
  ;; This requires setting up some code in "early-init.el", see that
  ;; file for more information.

  ;; Boostrap `straight' and load helper package `straight-x' for
  ;; other useful commands.

  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el"
                           user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Load the helper package for commands such as 'straight-x-clean-unused-repos'
  (require 'straight-x)

#+end_src

Setup use with =use-package=

#+begin_src emacs-lisp :tangle ./conf/package-management-conf.el

  ;;; `use-package' Setup with `straight'

  ;; `use-package' initialization to use `straight.el' rather than its default
  ;; use of `package.el'
  ;; setup use-package to use straight.el rather than it's default use of package.el.
  (straight-use-package 'use-package)

  ;; Always enable straight.el with use-package
  (setq straight-use-package-by-default t)

#+end_src

Use =no-littering= to keep .emacs directory clean. Also, keep customization settings in a temporary file.

#+begin_src emacs-lisp :tangle ./conf/package-management-conf.el

  ;; Set up `no-littering' package to help keep directories where we edit files
  ;; and the Emacs configuration directory clean! It knows about a wide variety
  ;; of variables for built in Emacs features as well as those from community
  ;; packages so it can be much easier than finding and setting these variables
  ;; yourself.
  ;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
  (setq user-emacs-directory (expand-file-name def/user-emacs-cache-directory)
        url-history-file (expand-file-name "url/history" user-emacs-directory))

    ;;; Use no-littering to automatically set common paths to the new user-emacs-directory
  (use-package no-littering)

  ;; Keep customization settings in a temporary file
  (setq custom-file
        (if (boundp 'server-socket-dir)
            (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  ;;(load custom-file t)
  (load custom-file 'noerror 'nomessage)

#+end_src

Archive: Previous Packagemanagement configuration utilizing native =package.el=.

#+begin_src emacs-lisp :tangle no

  ;;; ARCHIVE
  ;; `package.el' Configuration
  ;; Previous package management system using `package.el'
  ;; Disabled for now, since we are using/experimenting with `straight.el'
  ;; ;; Initialize package sources
  ;; (require 'package)

  ;; (setq package-archives '(("melpa" . "https://melpa.org/packages/")
  ;;                          ("org" . "https://orgmode.org/elpa/")
  ;;                          ("elpa" . "https://elpa.gnu.org/packages/")))

  ;; (package-initialize)
  ;; (unless package-archive-contents
  ;;   (package-refresh-contents))

  ;; ;; Initialize use-package on non-Linux platforms
  ;; (unless (package-installed-p 'use-package)
  ;;   (package-install 'use-package))

  ;; (require 'use-package)
  ;; (setq use-package-always-ensure t)


  ;; Automatic Package updates
  ;; Disabled for now with use of `straight.el'
  ;; (use-package auto-package-update
  ;;   :custom
  ;;   (auto-package-update-interval 7)
  ;;   (auto-package-update-prompt-before-update t)
  ;;   (auto-package-update-hide-results t)
  ;;   :config
  ;;   (auto-package-update-maybe)
  ;;   (auto-package-update-at-time "11:00"))

#+end_src

Footer

#+begin_src emacs-lisp :tangle ./conf/package-management-conf.el

  
;;; Footer


;;; package-management-conf.el ends here
#+end_src

** Advanced UI Configuration

Header & Commentary

#+begin_src emacs-lisp :tangle ./conf/ui-conf.el :mkdirp yes
  ;;; ui-conf.el --- Emacs UI Configuration  -*- lexical-binding: t; -*-
  ;; This file is auto generated by Emacs.org

  ;; Author: Erik Almaraz <erik@almarazlabs.com>
  ;; Maintainer: Erik Almaraz <erik@almarazlabs.com>
  ;; Created 2021-12-05 Sun
  ;; Version: 0.1
  ;; Keywords: Emacs, .emacs, init, Emacs Lisp
  ;; URL: https;//github.com/skribest/dotEmacs

  ;;; Commentary

  ;;; References:

  ;;   [1] 
  ;;   [2] 
  ;;   [3] 

  ;;<=================================================================================================>


  ;;; Code:


#+end_src

Startup message

#+begin_src emacs-lisp :tangle ./conf/ui-conf.el

  ;;; Startup Message

  ;; Disable default Emacs startup message
  (setq inhibit-startup-echo-area-message t)

  (defun def/emacs-init-time ()
    "Return a string giving the duration of the Emacs initialization."
    (let ((str
           (format "%.2f seconds"
                   (float-time
                    (time-subtract after-init-time before-init-time)))))
      str))

  (defun def/display-startup-init-info ()
    "Calculate and display Emacs initialization time, packages loaded, and 
    garbage collections."
    (let ((package-count 0)
          (time (def/emacs-init-time)))
      (when (bound-and-true-p package-alist)
        (setq package-count (length package-activated-list)))
      (when (boundp 'straight--profile-cache)
        (setq package-count (+ (hash-table-size straight--profile-cache) package-count)))
      (if (zerop package-count)
          (message "Emacs started in %s with %d garbage collection(s)." time gcs-done)
        (message
         "Emacs started in %s, loaded %d package(s) and performed %d garbage collection(s)."
         time package-count gcs-done))))

  (add-hook 'emacs-startup-hook #'def/display-startup-init-info)

#+end_src

Keybinding Configuration

#+begin_src emacs-lisp :tangle ./conf/ui-conf.el

  ;;; Keybinding Configuration

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;; Use `general' for its keybinding functionality
  (use-package general
    ;;:after evil
    :config
    ;;(general-evil-setup t)
    (general-create-definer def/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))

  (def/leader-keys
    "t"  '(:ignore t :which-key "toggles")
    "tt" '(counsel-load-theme :which-key "choose theme")
    "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/Emacs.org"))))

  ;; 
  (use-package undo-tree
    :init
    (global-undo-tree-mode 1))

#+end_src

Color Theme

#+begin_src emacs-lisp :tangle ./conf/ui-conf.el

  ;;; Color Theme
  ;; Use doom-themes. You can also run `counsel-load-themes' to choose between them easily.
  (use-package doom-themes
    :init (load-theme 'doom-palenight t))

#+end_src

Modeline

#+begin_src emacs-lisp :tangle ./conf/ui-conf.el

  ;;; Modeline
  ;; 
  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 27)))

#+end_src

Text Scaling

#+begin_src emacs-lisp :tangle ./conf/ui-conf.el

  ;;; Text Scaling
  (use-package hydra
    :defer t)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (def/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

Command Log Mode (Disabled)

#+begin_src emacs-lisp :tangle no

  ;;; Command Log Mode
  (use-package command-log-mode
    :commands command-log-mode)

#+end_src

Footer

#+begin_src emacs-lisp :tangle ./conf/ui-conf.el

  ;;; Footer


  ;;; ui-conf.el ends here
#+end_src

** Completion Framework

Header & Commentary

#+begin_src emacs-lisp :tangle ./conf/completion-framework-conf.el :mkdirp yes
  ;;; completion-framework-conf.el --- Emacs Completion Framework  -*- lexical-binding: t; -*-
  ;; This file is auto generated by Emacs.org

  ;; Author: Erik Almaraz <erik@almarazlabs.com>
  ;; Maintainer: Erik Almaraz <erik@almarazlabs.com>
  ;; Created 2021-12-05 Sun
  ;; Version: 0.1
  ;; Keywords: Emacs, .emacs, init, Emacs Lisp
  ;; URL: https://github.com/skribest/dotEmacs

  ;;; Commentary

  ;; Set up completions with Vertico and completion actions with embark...
  ;; So far I have this setup fully installed and working very well,
  ;; this is actually working better than Ivy, Counsel and Which Key
  ;; - that is, Vertico and EMBARK, also this setup works better with
  ;; Marginalia, unlike the former setup.

  ;;; References:

  ;;   [1] 
  ;;   [2] 
  ;;   [3] 

  ;;<=================================================================================================>


  ;;; Code:


#+end_src

Persist history over Emacs restarts. Vertico sorts by history position.

#+begin_src emacs-lisp :tangle ./conf/completion-framework-conf.el

  ;;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :straight nil
    :init
    (setq history-length 25)
    (savehist-mode))

  ;; Individual history elements can be configured separately
  ;;(put 'minibuffer-history 'history-length 25)
  ;;(put 'evil-ex-history 'history-length 50)
  ;;(put 'kill-ring 'history-length 25))

#+end_src

Completions with Vertico

#+begin_src emacs-lisp :tangle ./conf/completion-framework-conf.el

  ;;; Completions with Vertico
  (defun def/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name, delete up to parent folder otherwise delete word"
    (interactive "p")
    (if minibuffer-completing-file-name
        ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
      (backward-kill-word arg)))

  ;; Enable vertico
  (use-package vertico
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . def/minibuffer-backward-kill))
    :custom
    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (vertico-cycle t)
    ;; Different scroll margin, default 2
    (vertico-scroll-margin 1)
    ;; Show more/less candidates, default 10
    (vertico-count 12)
    ;; Grow and shrink the Vertico minibuffer - I find this too distracting...
    ;;(vertico-resize t)
    :custom-face
    (vertico-current ((t (:background "#3a3f5a"))))
    :init
    (vertico-mode))

#+end_src

Completions in regions with Corfu (Disabled)

#+begin_src emacs-lisp :tangle no
  ;;; Completions in regions with Corfu

  (use-package corfu
    :straight '(corfu :host github
                      :repo "minad/corfu")
    :bind (:map corfu-map
                ("C-j" . corfu-next)
                ("C-k" . corfu-previous)
                ("C-f" . corfu-insert))
    :custom
    (corfu-cycle t)
    :config
    (corfu-global-mode))

#+end_src

Improved Candidate Filtering with Orderless

#+begin_src emacs-lisp :tangle ./conf/completion-framework-conf.el

  ;;; Improved Candidtae Filtering with Orderless
  ;; Enable Orderless
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

#+end_src

Completion Actions with EMBARK

#+begin_src emacs-lisp :tangle ./conf/completion-framework-conf.el

  ;; Completion Actions with EMBARK
  ;; Adding in some helper packages to work with EMBARK
  (use-package embark
    :bind
    (("C-."   . embark-act)
     ("M-."   . embark-dwim)
     ("C-h B" . embark-bindings))
    :init
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Show Embark action via which-key
    (setq embark-action-indicator
          (lambda (map)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator))

  (use-package embark-consult)

  (use-package ace-window
    :bind (("M-o" . ace-window))
    :config
    (setq aw-dispatch-always t))

  ;; (global-set-key (kbd "M-o") 'ace-window)
  ;; (setq aw-dispatch-always t)

  (use-package 0x0
    :bind (:map embark-region-map
                ("U" . 0x0-dwim)))

  ;; (define-key embark-region-map (kbd "U") '0x0-dwim)

#+end_src

Consult commands

#+begin_src emacs-lisp :tangle ./conf/completion-framework-conf.el

  ;;; Consult Commands
  (use-package consult
    :demand t
    :bind (("C-s"   . consult-line)
           ("C-M-l" . consult-imenu)
           ("C-M-j" . persp-switch-to-buffer*)
           :map minibuffer-local-map
           ("C-r"   . consult-history))
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Optionally replace `completing-read-multiple' with an enhanced version.
    (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    :custom
    (completion-in-region-function #'consult-completion-in-region)
    :config
    ;;(consult-preview-mode)
    )

#+end_src

Completion Annotations with Marginalia

#+begin_src emacs-lisp :tangle ./conf/completion-framework-conf.el

  ;;; Completion Annotations with Marginalia
  (use-package marginalia
    :after vertico
    ;; Either bind 'marginalia-cycle' globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))

#+end_src

Keybinding Panel =which-key=, this should be installed by default Emacs!

#+begin_src emacs-lisp :tangle ./conf/completion-framework-conf.el

  ;;; Keybinding Panel `which-key'
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))

#+end_src

Improved Help Commands with =helpful=

#+begin_src emacs-lisp :tangle ./conf/completion-framework-conf.el

    ;;; Help Commands with Helpful
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

Footer

#+begin_src emacs-lisp :tangle ./conf/completion-framework-conf.el

  ;;; Footer

  ;;; completion-framework-conf.el ends here
#+end_src

** File System Configuration

Header & Commentary

#+begin_src emacs-lisp :tangle ./conf/file-system-conf.el :mkdirp yes
  ;;; file-system-conf.el --- Emacs File System Configuration  -*- lexical-binding: t; -*-
  ;; This file is auto generated by Emacs.org

  ;; Author: Erik Almaraz <erik@almarazlabs.com>
  ;; Maintainer: Erik Almaraz <erik@almarazlabs.com>
  ;; Created 2021-12-05 Sun
  ;; Version: 0.1
  ;; Keywords: Emacs, .emacs, init, Emacs Lisp
  ;; URL: https;//github.com/skribest/dotEmacs

  ;;; Commentary

  ;; Key Bindings:

  ;; Navigation
  ;; *Emacs* / *Evil*
  ;; =n= / =j= - next line
  ;; =p= / =k= - previous line
  ;; =j= / =J= - jump to file in buffer
  ;; =RET= - select file or directory
  ;; =^= - go to parent directory
  ;; =S-RET= / =g O= - Open file in "other" window
  ;; =M-RET= - Show file in other window without focusing (previewing files)
  ;; =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
  ;; =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration
  ;;             (and after filesystem changes!)

  ;; Marking Files
  ;; =m= - Marks a file
  ;; =u= - Unmarks a file
  ;; =U= - Unmarks all files in buffer
  ;; =* t= / =t= - Inverts marked files in buffer
  ;; =% m= - Mark files in buffer using regular expression
  ;; =*= - Lots of other auto-marking functions
  ;; =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
  ;; Many operations can be done on a single file if there are no active marks!

  ;; Copying and Renaming Files
  ;; =C= - Copy marked files (or if no files are marked, the current file)
  ;; Copying single and multiple files
  ;; =U= - Unmark all files in buffer
  ;; =R= - Rename marked files, renaming multiple is a move!
  ;; =% R= - Rename based on regular expression: =^test= , =old-\&=
  ;; *Power command*: =C-x C-q= (=dired-toggle-read-only=)
  ;;  - Makes all file names in the buffer editable directly to rename them!
  ;;    Press =Z Z= to confirm renaming or =Z Q= to abort.

  ;; Deleting Files
  ;; =D= - Delete marked file
  ;; =d= - Mark file for deletion
  ;; =x= - Execute deletion for marks
  ;; =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

  ;; Creating and Extracting Archives
  ;; =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
  ;; =c= - Compress selection to a specific file
  ;; =dired-compress-files-alist= - Bind compression commands to file extension

  ;; Other Common Operations
  ;; =T= - Touch (change timestamp)
  ;; =M= - Change file mode
  ;; =O= - Change file owner
  ;; =G= - Change file group
  ;; =S= - Create a symbolic link to this file
  ;; =L= - Load an Emacs Lisp file into Emacs

  ;;; References:

  ;;   [1] 
  ;;   [2] 
  ;;   [3] 

  ;;<=================================================================================================>


  ;;; Code:

  
#+end_src

Dired Configuration

#+begin_src emacs-lisp :tangle ./conf/file-system-conf.el

  ;;; Dired Configuration
  ;; use `use-package' to configure `dired-jump' and bind to "C-x C-j".
  ;; Also, add helper packages with this configuration.
  (use-package dired
    :straight nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump)))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

#+end_src

Eshell Configuration

#+begin_src emacs-lisp :tangle ./conf/file-system-conf.el

  ;;; Eshell Configuration
  ;; *Useful key bindings:*

  ;; - =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts
  ;;   (also =[[= and =]]= with evil-mode)
  ;; - =M-p= / =M-n= - go back and forward in the input history
  ;; - =C-c C-u= - delete the current input string backwards up to the cursor
  ;; - =counsel-esh-history= - A searchable history of commands typed into Eshell

  ;; for more thoughts on Eshell, check out these articles by Pierre Neidhardt:
  ;; - https://ambrevar.xyz/emacs-eshell/index.html
  ;; - https://ambrevar.xyz/emacs-eshell-versus-shell/index.html
  (defun def/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
    :after eshell)

  (use-package eshell
    :straight nil
    :hook (eshell-first-time-mode . def/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))

#+end_src

File Encryption with AES

#+begin_src emacs-lisp :tangle ./conf/file-system-conf.el

  ;;; File Encryption

  ;;; AES Encryption
  ;; see aes.el  
  (use-package aes
    :init
    (require 'aes)
    :config
    (aes-enable-auto-decryption))

#+end_src

File Encryption with EasyPG (Disabled)

#+begin_src emacs-lisp :tangle no

  ;;; EasyPG Native Encryption
  ;; Disabled for now, experimenting with AES
  ;; (use-package epa-file
  ;;   :straight nil
  ;;   :config
  ;;   (require 'epa-file)
  ;;   (epa-file-enable)
  ;;   ;;(setq epg-gpg-program "path-exe") ; Try this next, I tried the one's below (didn't work)
  ;;   ;;(setq agent-info 1)
  ;;   ;;(setenv "GPG_AGENT_INFO" "1")
  ;;   ;; configuration settings
  ;;   )

  ;; (use-package org-crypt
  ;;   :straight nil
  ;;   ;; configuration settings
  ;;   )

#+end_src

Footer

#+begin_src emacs-lisp

  ;;; Footer

  ;;; file-system-conf.el ends here
#+end_src

** Emacs IDE Setup

Header & Commentary

#+begin_src emacs-lisp :tangle ./conf/ide-conf.el :mkdirp yes
  ;;; ide-conf.el --- Emacs IDE Configuration  -*- lexical-binding: t; -*-
  ;; This file is auto generated by Emacs.org

  ;; Author: Erik Almaraz <erik@almarazlabs.com>
  ;; Maintainer: Erik Almaraz <erik@almarazlabs.com>
  ;; Created 2021-12-05 Sat - TBD
  ;; Version: 0.1
  ;; Keywords: Emacs, .emacs, init, Emacs Lisp
  ;; URL: https;//github.com/skribest/dotEmacs

  ;;; Commentary

  ;;; References:
  ;;   [1] 
  ;;   [2] 
  ;;   [3] 

  ;;<=================================================================================================>


  ;;; Code:


#+end_src

Coding & Editing System Configuration

#+begin_src emacs-lisp :tangle ./conf/ide-conf.el

  ;;; Coding & Editing System Configuration
  ;; TODO: Set defconstants for these and/or defcustoms?
  ;;

  ;; Set the coding system to UTF-8 everywhere
  (prefer-coding-system       'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)

  ;; Tab Widths
  (setq-default tab-width 2)

  ;; Use spaces instead of tabs for indentation
  (setq-default indent-tabs-mode nil)

#+end_src

Language Config with =lsp-mode=

#+begin_src emacs-lisp :tangle ./conf/ide-conf.el

  ;;; Languages with "lsp-mode"
  ;; Add Commentary
  (defun def/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . def/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

  ;; Try these commands with =M-x=:
  ;; - =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
  ;; - =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
  ;; - =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

  (use-package lsp-treemacs
    :after lsp)

#+end_src

Debugging with =dap-mode=

#+begin_src emacs-lisp :tangle ./conf/ide-conf.el

  ;;; Debugging with `dap-mode'
  (use-package dap-mode
    ;; Uncomment the config below if you want all UI panes to be hidden by default!
    ;; :custom
    ;; (lsp-enable-dap-auto-configure nil)
    ;; :config
    ;; (dap-ui-mode 1)
    :commands dap-debug
    :config
    ;; Set up Node debugging
    (require 'dap-node)
    (dap-node-setup) ;; Automatically installs Node debug adapter if needed

    ;; Bind `C-c l d` to `dap-hydra` for easy access
    (general-define-key
     :keymaps 'lsp-mode-map
     :prefix lsp-keymap-prefix
     "d" '(dap-hydra t :wk "debugger")))

#+end_src

TypeScript

#+begin_src emacs-lisp :tangle ./conf/ide-conf.el

  ;;; TypeScript
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

  ;; Note: In order for `lsp-mode' to work with TypeScript (and JavaScript)
  ;; you will need to install a language server on your machine. If you have
  ;; Node.js installed, the easiest way to do that is by running the following
  ;; command:
  ;; npm install -g typescript-language-server typescript

#+end_src

Python (Disabled for now)

#+begin_src emacs-lisp :tangle no

  ;;; Python
  ;; Make sure you have `pyls' language server installed before trying
  ;; `lsp-mode'
  (use-package python-mode
    :hook (python-mode . lsp-deferred)
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    ;; (python-shell-interpreter "python3")
    ;; (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))

  ;; You can use `pyvenv' to use `virtualevn' evironments on Emacs.
  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))

#+end_src

 Syntax Checking (TODO - Disabled)

#+begin_src emacs-lisp :tangle no

  ;;; Syntax Checking (TODO)
  ;; Disabled for now...

  ;; (use-package flycheck
  ;;   :after lsp-mode
  ;;   :init (global-flycheck-mode))

#+end_src

Company Mode

#+begin_src emacs-lisp :tangle ./conf/ide-conf.el

  ;;; Company Mode
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

Projectile

#+begin_src emacs-lisp :tangle ./conf/ide-conf.el

  ;;; Projectile
  ;;
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))

#+end_src

Magit

#+begin_src emacs-lisp :tangle ./conf/ide-conf.el

  ;;; Magit
  ;; The best Git interface I've ever used.
  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :config
    (setq magit-clone-always-transient nil)
    )

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)

#+end_src

Commenting & Rainbow Delimiters

#+begin_src emacs-lisp :tangle ./conf/ide-conf.el

  ;;; Commenting
  ;; This program can be used without evil-mode!
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))


  ;;; Rainbow Delimiters
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

Blamer (disabled)

#+begin_src emacs-lisp :tangle ./conf/ide-conf.el

  ;;; Blamer
  ;; Disabled for now
  ;; (use-package blamer
  ;;   :defer 20
  ;;   :custom
  ;;   (blamer-idle-time 0.3)
  ;;   (blamer-min-offset 70)
  ;;   :custom-face
  ;;   (blamer-face ((t :foreground "#7a88cf"
  ;;                    :background nil
  ;;                    :height 120 ;140
  ;;                    :italic t)))
  ;;   :config
  ;;   (global-blamer-mode 1))

#+end_src

Footer

#+begin_src emacs-lisp :tangle ./conf/ide-conf.el

  ;;; Footer

  
  ;;; ide-conf.el ends here
#+end_src

* Org Configuration

** Setup Org Mode

Header & Commentary

#+begin_src emacs-lisp :tangle ./conf/org-conf.el :mkdirp yes
  ;;; org-conf.el --- Emacs Org Configuration  -*- lexical-binding: t; -*-
  ;; This file is auto generated by Emacs.org

  ;; Author: Erik Almaraz <erik@almarazlabs.com>
  ;; Maintainer: Erik Almaraz <erik@almarazlabs.com>
  ;; Created 2021-12-05 Sun
  ;; Version: 0.1
  ;; Keywords: Emacs, .emacs, init, Emacs Lisp
  ;; URL: https;//github.com/skribest/dotEmacs

  ;; Commentary

  ;;; References:

  ;;   [1] 
  ;;   [2] 
  ;;   [3] 

  ;;<=================================================================================================>


  ;;; Code:


#+end_src

Font Faces

#+begin_src emacs-lisp :tangle ./conf/org-conf.el

  ;;; Font Faces
  (defun def/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil
                          :font def/default-variable-font-family
                          :weight 'regular
                          :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))


#+end_src

Basic Org Configuration

#+begin_src emacs-lisp :tangle ./conf/org-conf.el

  ;;; Basic Org Configuration
  (defun def/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    ;;:pin org ; This does not work for some reasion using straight.el
    :commands (org-capture org-agenda)
    :hook (org-mode . def/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-goto-auto-isearch nil) ;; this is a test to try org-goto function...
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-toggle-pretty-entities t) ;; Always set to true, I do a lot of latex manuscript writting

    (setq org-refile-targest
          '(("Archive.org" :maxlevel . 1)))
    ;; Save Org Buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    ;; For some reason defvar's are working here... why?
    (setq org-agenda-files
          '((concat def/org-agenda-dir "Tasks.org")
            (concat def/org-agenda-dir "Journal.org")
            (concat def/org-agenda-dir "Metabox.org")
            (concat def/org-agenda-dir "Birthdays.org")
            (concat def/org-agenda-dir "Habits.org")
            ))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)"
                      "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)"
                      "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org"   :maxlevel . 1)
            ("Journal.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
          '((:startgroup)
                                          ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand"  . ?E)
            ("@home"    . ?H)
            ("@work"    . ?W)
            ("agenda"   . ?a)
            ("planning" . ?p)
            ("publish"  . ?P)
            ("batch"    . ?b)
            ("note"     . ?n)
            ("idea"     . ?i)))

    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "Work Tasks" tags-todo "+work-email")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))

    ;; Config Org Capture Templates
    (setq org-capture-templates
          `(
            ("t" "Tasks / Projects")
            ("tt" "Task" entry
             (file+olp "~/.emacs.d/OrgFiles/agenda/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/.emacs.d/OrgFiles/Agenda/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)

            ("jm" "Meeting" entry
             (file+olp+datetree  "~/.emacs.d/OrgFiles/Agenda/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry
             (file+olp+datetree  "~/.emacs.d/OrgFiles/Agenda/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line
             (file+headline "~/.emacs.d/OrgFiles/Agenda/Metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)
            )
          )

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))

    (define-key global-map (kbd "C-c m")
      (lambda () (interactive) (org-capture nil "mw")))

    (def/org-font-setup)
    );; end use-package Org


#+end_src

Heading Bullets

#+begin_src emacs-lisp :tangle ./conf/org-conf.el

  ;;; Nicer Heading Bullets
  ;;
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

Center Org Buffer and set =visual-fill-column=

#+begin_src emacs-lisp :tangle ./conf/org-conf.el

  ;;; Center Org Buffers
  ;;
  (defun def/org-mode-visual-fill ()
    (setq visual-fill-column-width 107
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . def/org-mode-visual-fill))

#+end_src

Footer

#+begin_src emacs-lisp :tangle ./conf/org-conf.el

  ;;; Footer


  ;;; org-conf.el ends here
#+end_src

** Org Babel

Header & Commentary

#+begin_src emacs-lisp :tangle ./conf/babel-conf.el :mkdirp yes
  ;;; babel-conf.el --- Emacs Org Babel Configuration
  ;; This file is auto generated by Emacs.org

  ;; Author: Erik Almaraz <erik@almarazlabs.com>
  ;; Maintainer: Erik Almaraz <erik@almarazlabs.com>
  ;; Created 2021-12-05 Sun
  ;; Version: 0.1
  ;; Keywords: Emacs, .emacs, init, Emacs Lisp
  ;; URL: https;//github.com/skribest/dotEmacs

  ;;; Commentary

  ;;; References:

  ;;   [1] 
  ;;   [2] 
  ;;   [3] 

  ;;<=================================================================================================>


  ;;; Code:


#+end_src

Babel Initialization

#+begin_src emacs-lisp :tangle ./conf/babel-conf.el

  ;;; Initialization
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (emacs-lisp . t)
       ;; Disable for now
       (scheme . nil)
       (python . nil)
       (shell . nil)
       ))
    (push '("conf-unix" . conf-unix) org-src-lang-modes)
    (setq org-confirm-babel-evaluate nil))

#+end_src

Structure Templates

#+begin_src emacs-lisp :tangle ./conf/babel-conf.el

  ;;; Structure Templates
  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("scm" . "src scheme"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell")))

#+end_src

Guile Scheme REPL Configuration

#+begin_src emacs-lisp :tangle ./conf/babel-conf.el

  ;;; Guile Scheme REPL Configuration
  ;;
  (use-package geiser
    :if (not def/work)
    :hook (scheme-mode-hook . geiser-mode)
    :config
    (geiser-default-implementation 'guile)
    (geiser-repl-use-other-window nil))

  (use-package geiser-guile
    :if (not def/work)
    :after geiser)

#+end_src

Babel Auto-Tangle Select Files

#+begin_src emacs-lisp :tangle ./conf/babel-conf.el

  ;;; Auto-Tangle Select Files

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun def/org-babel-tangle-config ()
    (when (string-equal (file-name-directory
                         (buffer-file-name))
                        (expand-file-name def/user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))
      ))

  ;; Automatically tangle Literate Programming files when we save them
  (defun def/org-babel-tangle-literate ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name def/lp-dir))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))
      ))

  (add-hook 'org-mode-hook
            (lambda () (add-hook 'after-save-hook
                                 #'def/org-babel-tangle-config)))

  (add-hook 'org-mode-hook
            (lambda () (add-hook 'after-save-hook
                                 #'def/org-babel-tangle-literate)))

#+end_src

Footer

#+begin_src emacs-lisp :tangle ./conf/babel-conf.el

  ;;; Footer

  ;;; babel-conf.el ends here
#+end_src

** Org Roam

Header & Commentary

#+begin_src emacs-lisp :tangle ./conf/roam-conf.el :mkdirp yes
  ;;; roam-conf.el --- Emacs Org Roam Configuration  -*- lexical-binding: t; -*-
  ;; This file is auto generated by Emacs.org

  ;; Author: Erik Almaraz <erik@almarazlabs.com>
  ;; Maintainer: Erik Almaraz <erik@almarazlabs.com>
  ;; Created 2021-12-05 Sun
  ;; Version: 0.1
  ;; Keywords: Emacs, .emacs, init, Emacs Lisp
  ;; URL: https;//github.com/skribest/dotEmacs

  ;;; Commentary

  ;;; References:

  ;;   [1] 
  ;;   [2] 
  ;;   [3] 

  ;;<=================================================================================================>


  ;;; Code:


#+end_src

Org Roam Initialization

#+begin_src emacs-lisp :tangle ./conf/roam-conf.el

  ;;; Initialize Org Roam
  (use-package org-roam
    ;;:demand t ; This is significantly slowing my startup performance, but is needed for hacks!
    :after org
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory def/org-roam-dir)
    (org-roam-completion-everywhere t)
    (org-roam-completion-system 'default)
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new
        (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                   "#+title: ${title}\n#+category: ${title}\n#+filetags: Default")
        :unnarrowed t)
       ("p" "project" plain
        ;;"* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
        (file "~/.emacs.d/OrgFiles/Roam/Templates/ProjectTemplate.org")
        :if-new
        (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                   "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
        :unnarrowed t)
       ;; This template is still under development
       ("s" "sample requests" table-line
        ;; This org file template give a "bad template" error after capture is complete...
        ;;(file "~/.emacs.d/OrgFiles/Roam/Templates/SampleRequests.org")
        "| %U | %^{PDR#} | %^{Trade Name} | %^{Supplier} | %^{Notes} | %? |"
        :if-new
        (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                   "#+title: ${title}\n#+category: ${title}\n#+filetags: Sample Requests")
        :unnarrowed t
        :kill-buffer t)
       ))
    (org-roam-dailies-directory "Journal/")
    (org-roam-dailies-capture-templates
     '(("d" "default" entry
        "* %<%I:%M %p>: %?"
        :if-new
        (file+head "%<%Y-%m-%d-%a>.org" "#+title: %<%Y-%m-%d-%a>\n"))))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ;;("C-c n I" . org-roam-node-insert-immediate)
           ;; ("C-c n p" . my/org-roam-find-project)
           ;; ("C-c n b" . my/org-roam-capture-inbox)
           ;; ("C-c n t" . my/org-roam-capture-task)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow)
           )
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)

    ;; Key binding for sample request entries
    ;;("C-c s r" . (lambda () (interactive) (org-capture nil "s"))) 
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-setup) ;; Not exactly sure what this does or why I initially used this...
    (org-roam-db-autosync-mode))

#+end_src

Hacks for streamlined note taking (Disabled)

#+begin_src emacs-lisp :tangle no

  ;;; Hacks


  ;;; Fast note insertion for streamlined notes

  ;; Bind this to C-c n I
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)
                                                    ;;'(:kill-buffer t)
                                                    ))))

      (apply #'org-roam-node-insert args)))


  ;;; Build your own Org agenda from Org Roam notes

  ;; The buffer you put this code in must have lexical-binding set to t!
  ;; See the final configuration at the end for more details.
  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun my/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list))))

  (defun my/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project")))

  ;; Build the agenda list the first time for the session
  (my/org-roam-refresh-agenda-list)


  ;;; Selecting from a list of notes with a speciic tag

  (defun my/org-roam-project-finalize-hook ()
    "Adds the captured project file to `org-agenda-files' if the
    capture was not aborted."
    ;; Remove the hook since it was added temporarily
    (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Add project file to the agenda list if the capture was confirmed
    (unless org-note-abort
      (with-current-buffer (org-capture-get :buffer)
        (add-to-list 'org-agenda-files (buffer-file-name)))))

  (defun my/org-roam-find-project ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Select a project file to open, creating it if necessary
    (org-roam-node-find
     nil
     nil
     (my/org-roam-filter-by-tag "Project")
     :templates
     '(("p" "project" plain
        "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
        ;;(file "~/.emacs.d/OrgFiles/Roam/Templates/ProjectTemplate.org")
        :if-new 
        (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                   "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
        :unnarrowed t))))

  ;;; Stremlined custom capture for tasks & notes

  ;; Keep an Inbox of notes & tasks
  (defun my/org-roam-capture-inbox ()
    (interactive)
    (org-roam-capture- :node (org-roam-node-create)
                       :templates 
                       '(("i" "inbox" plain 
                          "* %?"
                          :if-new 
                          (file+head "Inbox.org" "#+title: Inbox")))))

  ;; Capture a task directly into a specific project
  (defun my/org-roam-capture-inbox ()
    (interactive)
    (org-roam-capture- :node (org-roam-node-create)
                       :templates 
                       '(("i" "inbox" plain 
                          "* %?"
                          :if-new 
                          (file+head "Inbox.org" "#+title: Inbox")))))

#+end_src

Footer

#+begin_src emacs-lisp :tangle ./conf/roam-conf.el

  ;;; Footer
  
  ;; roam-conf.el ends here
#+end_src

* Exploratory Packages

** Header & Commentary

Header & Commentary

#+begin_src emacs-lisp :tangle ./conf/exploratory-packages-conf.el :mkdirp yes
  ;;; exploratory-pkgs-conf.el --- Exploratory Packages Configuration  -*- lexical-binding: t; -*-
  ;; This file is auto generated by Emacs.org

  ;; Author: Erik Almaraz <erik@almarazlabs.com>
  ;; Maintainer: Erik Almaraz <erik@almarazlabs.com>
  ;; Created 2021-12-05 Sun
  ;; Version: 0.1
  ;; Keywords: Emacs, .emacs, init, Emacs Lisp
  ;; URL: https;//github.com/skribest/emacs-config

  ;;; Commentary

  ;; Introduction (TBD)


  ;;; References:

  ;;   [1] 
  ;;   [2] 
  ;;   [3] 

  ;;<=================================================================================================>


#+end_src

** Chemistry

Chemtable & Chembalance

#+begin_src emacs-lisp :tangle ./conf/exploratory-packages-conf.el

  ;;; Chemtable & chembalance
  (use-package chemtable
    :init
    (require 'chemtable)
    ;;:config
    )

  (use-package chembalance
    :init
    (require 'chembalance)
    ;;:config
    ;;(chembalance-arrow-syntax (list of accepted arrows))
    ;;(chembalance-insert-string 1) ;if non-nil, when you call chembalance with selected region,
    ;;chembalance will kill that region and insert the balanced reaction.
    )

#+end_src

** Other

Eww Configuration

#+begin_src emacs-lisp :tangle ./conf/exploratory-packages-conf.el

  ;;; EWW Configuration (native to Emacs), hence set `straight' to `nil'.
  (use-package eww
    :straight nil
    :config
    ;; make Emacs always use its own browser for opening URL links
    (setq browse-url-browser-function 'eww-browse-url))

  ;;; Open URL in new buffer
  ;; Thanks to Xah Emacs (http://xahlee.info/emacs/emacs/emacs_eww_web_browser.html)
  ;; for the following code contribution.
  ;; Eww was written by Lar Magne Ingebrigtsen (http://quimby.gnus.org/lmi/lmi.html)
  ;; see his blog (http://lars.ingebrigtsen.no/2013/06/16/eww/) for more information.

  (when (fboundp 'eww)
    (defun ri/rename-eww-buffer ()
      "Rename `eww-mode' buffer so sites open in new page."
      (let (($title (plist-get eww-data :title)))
        (when (eq major-mode 'eww-mode )
          (if $title
              (rename-buffer (concat "eww " $title ) t)
            (rename-buffer "eww" t)))))
  
    (add-hook 'eww-after-render-hook 'ri/rename-eww-buffer))

#+end_src

** Footer
Footer

#+begin_src emacs-lisp :tangle ./conf/exploratory-packages-conf.el


  ;;;Footer

  
  ;;; exploratory-packages-conf.el ends here
#+end_src

* Outro

** Footers

Runtime performance and init.el footer.

#+begin_src emacs-lisp :tangle ./init.el

  ;;; Runtime Performance
  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))
  ;;(add-hook 'focus-out-hook #'garbage-collect)




  ;;; Footer


  ;;; init.el ends here
#+end_src

Footer for early-init.el

#+begin_src emacs-lisp :tangle ./early-init.el

  ;;; Footer


  ;;; early-init.el ends here
#+end_src

* Utilities
** Header

Header and Commentary

#+begin_src emacs-lisp :tangle ./elisp/utils.el :mkdirp yes
  ;;; utils.el --- Emacs Lisp Utilities -  -*- lexical-binding: t; -*-
  ;; This file is auto generated by Emacs.org
  
  ;; Author: Erik Almaraz <erik@almarazlabs.com>
  ;; Maintainer: Erik Almaraz <erik@almarazlabs.com>
  ;; Created 2021-12-05 Sun
  ;; Version: 0.1
  ;; Keywords: Emacs, .emacs, init, Emacs Lisp
  ;; URL: https;//github.com/skribest/dotEmacs

  ;;; Commentary

  ;; Rename File and Buffer is inspired from Steve Yegge's .emacs file [1] and
  ;; I found New Empty Buffer while looking through Xah's very helpful Emacs
  ;; blog/website [2].

  ;; References:

  ;;   [1] https://sites.google.com/site/steveyegge2/my-dot-emacs-file
  ;;   [2] http://xahlee.info/emacs/emacs/emacs_new_empty_buffer.html
  ;;   [3]

  ;;<=================================================================================================>


  ;;; Code:


#+end_src

** Rename File and Buffer

#+begin_src emacs-lisp :tangle ./elisp/utils.el

  ;;; Rename File and Buffer
  ;;
  (defun rename-file-and-buffer (new-name)
    "Renames both current buffer and file it's visiting to NEW-NAME."
    (interactive "sNew name: ")
    (let (
          (name (buffer-name))
          (filename (buffer-file-name))
          )

      (if (not filename)
          (message "Buffer '%s' is not visiting a file!" name)
        (if (get-buffer new-name)
            (message "A buffer named '%s' already exists!" new-name)
          (progn
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil))))
      )
    )

#+end_src

** New Empty Buffer (Lisp Interaction)

#+begin_src emacs-lisp :tangle ./elisp/utils.el

  ;;; Provide New Empty (Lisp Interaction) Buffer
  ;;
  (defun new-empty-buffer ()
    "Create a new empty buffer. New buffer will be named “untitled” or “untitled<2>”, 
  “untitled<3>”, etc. It returns the buffer (Lisp Interaction Mode).

          Version 2021-11-16"
    (interactive)
    (let ((_buf (generate-new-buffer "untitled")))
      (switch-to-buffer _buf)
      (funcall initial-major-mode)
      (setq buffer-offer-save t)
      _buf
      ))

#+end_src

** Other Utilities

#+begin_src emacs-lisp :tangle ./elisp/utils.el

  ;;; IDE Related utility functions
  ;; Placing here to test and adapt code until it is refined enough and is robust enough to be set
  ;; in the proper `*-conf.el' file under "hacks" section.


  ;;; Code folding
  ;; One can fold code using "M-1 C-x $" and unfold using "C-x $", however,
  ;; while I was searching on stackoverflow, I found this function someone composed to keybind
  ;; this and make it a bit more convenient.
  ;; See also:
  ;; * https://www.gnu.org/software/emacs/manual/html_node/emacs/Outline-Mode.html
  ;; * https://www.emacswiki.org/emacs/OutlineMinorMode

  (defun ri/fold-code (&optional level)
    "Fold text indented at the same level or more than where cursor lies. If level is set, 
  set the indent level to LEVEL. If `selective-display' is already set to LEVEL, invoking again will
  unset `selective-display' by setting it to 0. TBD - Edit/refine documentation."
    (interactive "P")
    (if (eq selective-display (1+ (current-column)))
        (set-selective-display 0)
      (set-selective-display (or level (1+ (current-column))))))

  (global-set-key (kbd "C-c i c") 'ri/fold-code)


  ;;; Show Fill Column Indicator
  ;; Some code Chris (iambumblehead) introduced to me, setting here to test. I have already created
  ;; a defcustom variable to configure as this is apart of testing robustness and functionality of
  ;; this utility function.
  (defun ri/set-margin()
    "Need to implement documentation here..."
    (setq display-fill-column-indicator-column def/column-margin)
    (display-fill-column-indicator-mode))

  (add-hook 'prog-mode-hook 'ri/set-margin)

#+end_src

** Footer

#+begin_src emacs-lisp :tangle ./elisp/utils.el


  ;;; Footer

  
  ;;; utils.el ends here
#+end_src
