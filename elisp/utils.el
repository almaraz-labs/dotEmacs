;;; utils.el --- Emacs Lisp Utilities -  -*- lexical-binding: t; -*-
;; This file is auto generated by Emacs.org

;; Author: Erik Almaraz <erik@almarazlabs.com>
;; Maintainer: Erik Almaraz <erik@almarazlabs.com>
;; Created 2021-12-05 Sun
;; Version: 0.1
;; Keywords: Emacs, .emacs, init, Emacs Lisp
;; URL: https;//github.com/skribest/dotEmacs

;;; Commentary

;; Rename File and Buffer is inspired from Steve Yegge's .emacs file [1] and
;; I found New Empty Buffer while looking through Xah's very helpful Emacs
;; blog/website [2].

;; References:

;;   [1] https://sites.google.com/site/steveyegge2/my-dot-emacs-file
;;   [2] http://xahlee.info/emacs/emacs/emacs_new_empty_buffer.html
;;   [3]

;;<=================================================================================================>


;;; Code:

;;; Rename File and Buffer
;;
(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let (
        (name (buffer-name))
        (filename (buffer-file-name))
        )

    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil))))
    )
  )

;;; Provide New Empty (Lisp Interaction) Buffer
;;
(defun new-empty-buffer ()
  "Create a new empty buffer. New buffer will be named “untitled” or “untitled<2>”, 
“untitled<3>”, etc. It returns the buffer (Lisp Interaction Mode).

        Version 2021-11-16"
  (interactive)
  (let ((_buf (generate-new-buffer "untitled")))
    (switch-to-buffer _buf)
    (funcall initial-major-mode)
    (setq buffer-offer-save t)
    _buf
    ))

;;; IDE Related utility functions
;; Placing here to test and adapt code until it is refined enough and is robust enough to be set
;; in the proper `*-conf.el' file under "hacks" section.


;;; Code folding
;; One can fold code using "M-1 C-x $" and unfold using "C-x $", however,
;; while I was searching on stackoverflow, I found this function someone composed to keybind
;; this and make it a bit more convenient.
;; See also:
;; * https://www.gnu.org/software/emacs/manual/html_node/emacs/Outline-Mode.html
;; * https://www.emacswiki.org/emacs/OutlineMinorMode

(defun ri/fold-code (&optional level)
  "Fold text indented at the same level or more than where cursor lies. If level is set, 
set the indent level to LEVEL. If `selective-display' is already set to LEVEL, invoking again will
unset `selective-display' by setting it to 0. TBD - Edit/refine documentation."
  (interactive "P")
  (if (eq selective-display (1+ (current-column)))
      (set-selective-display 0)
    (set-selective-display (or level (1+ (current-column))))))

(global-set-key (kbd "C-c i c") 'ri/fold-code)


;;; Show Fill Column Indicator
;; Some code Chris (iambumblehead) introduced to me, setting here to test. I have already created
;; a defcustom variable to configure as this is apart of testing robustness and functionality of
;; this utility function.
(defun ri/set-margin()
  "Need to implement documentation here..."
  (setq display-fill-column-indicator-column def/column-margin)
  (display-fill-column-indicator-mode))

(add-hook 'prog-mode-hook 'ri/set-margin)

;;; Footer


;;; utils.el ends here
